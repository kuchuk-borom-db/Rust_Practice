---
import Layout from '../layouts/Layout.astro';
import Block from "../components/VisualFlowBlockReactComponent";
import {type BlockData, testData} from "../models/BlockData";

// Mock data for demonstration
const mockBlocks: Record<string, BlockData> = testData;

const initialBlockId = Object.keys(mockBlocks)[0];
---

<Layout title="Visual Flow Logger - Block Visualization">
    <style>
        /* Global body styles */
        body {
            min-width: 100%;
            min-height: 100%;
            width: max-content;
            height: max-content;
            margin: 0;
            padding: 0;
            background: linear-gradient(135deg, #0A1128, #1A1A2E);
            background-size: 200% 200%;
            animation: gradientAnimation 10s ease infinite;
            overflow: hidden; /* Prevent scrolling */
        }

        /* Gradient animation for background */
        @keyframes gradientAnimation {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        .title {
            font-family: 'Poppins', sans-serif;
            font-size: 3rem;
            font-weight: 700;
            background: linear-gradient(45deg, #00FFFF, #FF00FF, #00FFFF);
            background-size: 200% 200%;
            -webkit-background-clip: text;
            -webkit-text-fill-color: transparent;
            animation: textGradient 5s ease infinite;
            text-shadow: 0 0 10px rgba(0, 255, 255, 0.5), 0 0 20px rgba(255, 0, 255, 0.5);
            text-align: center; /* Center text horizontally */
            margin-top: 20px; /* Add some top margin */
        }

        @keyframes textGradient {
            0% {
                background-position: 0% 50%;
            }
            50% {
                background-position: 100% 50%;
            }
            100% {
                background-position: 0% 50%;
            }
        }

        /* Container to center the title */
        .title-container {
            display: flex;
            justify-content: center; /* Center horizontally */
            align-items: flex-start; /* Align to the top */
            width: 100%;
            padding-top: 20px; /* Add padding at the top */
        }

        /* Container for the block with zoom and pan */
        .block-container {
            position: relative;
            width: 100vw;
            height: 100vh;
            overflow: hidden;
        }

        /* Controls for zoom and pan */
        .controls {
            position: absolute;
            top: 20px;
            right: 20px;
            z-index: 10;
        }

        .controls button {
            background: rgba(0, 0, 0, 0.7);
            color: white;
            border: none;
            padding: 10px;
            margin: 5px;
            cursor: pointer;
            border-radius: 5px;
        }

        .controls button:hover {
            background: rgba(0, 0, 0, 0.9);
        }
    </style>

    <div class="title-container">
        <h1 class="title">Stack Flow Diagram</h1>
    </div>

    <div class="block-container">
        <div class="controls">
            <button id="zoom-in">Zoom In</button>
            <button id="zoom-out">Zoom Out</button>
            <button id="center">Center</button>
        </div>
        <div id="block-wrapper" style="transform: scale(1) translate(0px, 0px); transform-origin: 0 0;">
            <Block
                    client:load
                    blockID={initialBlockId}
                    blockData={mockBlocks[initialBlockId]}
                    blocks={mockBlocks}
            />
        </div>
    </div>

    <script>
        let scale = 1;
        let translateX = 0;
        let translateY = 0;
        let startX: any, startY: any;
        let initialMouseX: any, initialMouseY: any; // Track initial mouse position
        const DRAG_THRESHOLD = 5; // Threshold in pixels
        let isMouseDown = false; // Track if the mouse is pressed
        import {state} from "../models/global"

        const blockWrapper = document.getElementById('block-wrapper');
        const zoomInButton = document.getElementById('zoom-in');
        const zoomOutButton = document.getElementById('zoom-out');
        const centerButton = document.getElementById('center');

        // Zoom in
        zoomInButton!.addEventListener('click', () => {
            scale *= 1.2;
            updateTransform();
        });

        // Zoom out
        zoomOutButton!.addEventListener('click', () => {
            scale /= 1.2;
            updateTransform();
        });

        // Center the block
        centerButton!.addEventListener('click', () => {
            scale = 1;
            translateX = 0;
            translateY = 0;
            updateTransform();
        });

        // Panning
        blockWrapper!.addEventListener('mousedown', (e) => {
            isMouseDown = true;
            // Store initial mouse position
            initialMouseX = e.clientX;
            initialMouseY = e.clientY;
            startX = e.clientX - translateX;
            startY = e.clientY - translateY;
        });

        blockWrapper!.addEventListener('mousemove', (e) => {
            if (isMouseDown) {
                // Calculate the distance moved
                const dx = Math.abs(e.clientX - initialMouseX);
                const dy = Math.abs(e.clientY - initialMouseY);

                // Only start dragging if the threshold is exceeded
                if (!state.isDragging && (dx > DRAG_THRESHOLD || dy > DRAG_THRESHOLD)) {
                    console.log("Dragging start")
                    state.isDragging = true;
                }

                // Update translation if dragging
                if (state.isDragging) {
                    translateX = e.clientX - startX;
                    translateY = e.clientY - startY;
                    updateTransform();
                }
            }
        });

        blockWrapper!.addEventListener('mouseup', () => {
            isMouseDown = false;
            setTimeout(() => state.isDragging = false, 5);
        });

        blockWrapper!.addEventListener('mouseleave', () => {
            isMouseDown = false;
            setTimeout(() => state.isDragging = false, 5);
        });

        // Zoom with mouse wheel
        blockWrapper!.addEventListener('wheel', (e) => {
            e.preventDefault();
            const delta = e.deltaY;
            if (delta < 0) {
                scale *= 1.1;
            } else {
                scale /= 1.1;
            }
            updateTransform();
        });

        function updateTransform() {
            blockWrapper!.style.transform = `scale(${scale}) translate(${translateX}px, ${translateY}px)`;
        }
    </script>
</Layout>